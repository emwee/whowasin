// Generated by CoffeeScript 1.6.2
(function() {
  var Chaplin, badChars, config, escape, escapeChar, escapeExpression, possible, unescapeExpression, utils,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  config = require('config');

  utils = require('lib/utils');

  Chaplin = require('chaplin');

  Handlebars.registerHelper('ifLoggedIn', function(options) {
    var method;

    method = Chaplin.mediator.user ? options.fn : options.inverse;
    return method(this);
  });

  Handlebars.registerHelper('ifIsRepoAdmin', function(options) {
    var orgs, repoOwner, user, _ref, _ref1;

    user = Chaplin.mediator.user;
    if (!user) {
      return options.inverse(this);
    }
    orgs = (_ref = (_ref1 = user.get('organizations')) != null ? _ref1.pluck('login') : void 0) != null ? _ref : [];
    repoOwner = this.login;
    if (user.isAdmin() || user.get('login') === repoOwner || __indexOf.call(orgs, repoOwner) >= 0) {
      return options.fn(this);
    } else {
      return options.inverse(this);
    }
  });

  Handlebars.registerHelper('ifCanEditPost', function(options) {
    var orgs, postCreator, repoOwner, user, _ref, _ref1;

    user = Chaplin.mediator.user;
    if (!user) {
      return options.inverse(this);
    }
    orgs = (_ref = (_ref1 = user.get('organizations')) != null ? _ref1.pluck('login') : void 0) != null ? _ref : [];
    postCreator = this.user.login;
    repoOwner = this.topic.repo.user.login;
    if (user.isAdmin() || user.get('login') === postCreator || __indexOf.call(orgs, repoOwner) >= 0) {
      return options.fn(this);
    } else {
      return options.inverse(this);
    }
  });

  Handlebars.registerHelper('showShortcut', function(options) {
    if (/mac/i.test(navigator.userAgent)) {
      return ' (⌘↩)';
    } else {
      return '';
    }
  });

  Handlebars.registerHelper('showPostUrl', function(c, options) {
    var url;

    url = Chaplin.helpers.reverse('topics#show', [this.topic.repo.user.login, this.topic.repo.name, this.topic.number]);
    return new Handlebars.SafeString("<a class='post-url' href='" + url + "'>" + (url.slice(2)) + "</a>");
  });

  Handlebars.registerHelper('showLoginUrl', function() {
    var host, path, protocol, _ref;

    _ref = window.location, protocol = _ref.protocol, host = _ref.host;
    path = Chaplin.helpers.reverse('auth#callback');
    return encodeURIComponent("" + protocol + "//" + host + path);
  });

  Handlebars.registerHelper('with', function(context, options) {
    if (!context || Handlebars.Utils.isEmpty(context)) {
      return options.inverse(this);
    } else {
      return options.fn(context);
    }
  });

  Handlebars.registerHelper('withConfig', function(options) {
    var context;

    context = config;
    return Handlebars.helpers["with"].call(this, context, options);
  });

  Handlebars.registerHelper('withUser', function(options) {
    var context;

    context = Chaplin.mediator.user.getAttributes();
    return Handlebars.helpers["with"].call(this, context, options);
  });

  Handlebars.registerHelper('gravatar', function(options) {
    return "https://secure.gravatar.com/avatar/" + (options.fn(this)) + "?s=140&d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png";
  });

  Handlebars.registerHelper('date', function(options) {
    var date;

    date = new Date(options.fn(this));
    return new Handlebars.SafeString(moment(date).fromNow());
  });

  escape = {
    "&amp;": "&",
    "&lt;": "<",
    "&gt;": ">",
    "&quot;": '"',
    "&#x27;": "'",
    "&#x60;": "`"
  };

  badChars = /&(?:amp|lt|gt|quot|#x27|x60);/g;

  possible = /&(?:amp|lt|gt|quot|#x27|x60);/;

  escapeChar = function(chr) {
    var _ref;

    return (_ref = escape[chr]) != null ? _ref : "&";
  };

  escapeExpression = Handlebars.Utils.escapeExpression;

  unescapeExpression = function(string) {
    if (string instanceof Handlebars.SafeString) {
      return string.toString();
    } else if (!string) {
      return '';
    } else if (!possible.test(string)) {
      return string;
    } else {
      return string.replace(badChars, escapeChar);
    }
  };

  Handlebars.registerHelper('markdown', function(options) {
    var login, markdown, repo, repoName, string;

    repo = this.topic.repo;
    login = repo.user.login;
    repoName = repo.name;
    string = escapeExpression(options.fn(this)).replace(/&#x60;/g, '`');
    markdown = marked(string, {
      gfm: true,
      highlight: function(code, language) {
        var error, raw;

        raw = unescapeExpression(code);
        if (language && language in hljs.LANGUAGES) {
          try {
            return hljs.highlight(language, raw).value;
          } catch (_error) {
            error = _error;
            return new Handlebars.SafeString(code);
          }
        } else {
          return new Handlebars.SafeString(code);
        }
      }
    });
    return new Handlebars.SafeString(markdown);
  });

  Handlebars.registerHelper('url', function() {
    var options, params, routeName, _i;

    routeName = arguments[0], params = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), options = arguments[_i++];
    return Chaplin.helpers.reverse(routeName, params);
  });

}).call(this);
