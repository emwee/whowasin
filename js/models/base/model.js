// Generated by CoffeeScript 1.6.2
(function() {
  var Chaplin, Model, config, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Chaplin = require('chaplin');

  config = require('config');

  module.exports = Model = (function(_super) {
    __extends(Model, _super);

    function Model() {
      _ref = Model.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    _(Model.prototype).extend(Chaplin.SyncMachine);

    Model.prototype.apiRoot = config.api.versionRoot;

    Model.prototype.urlKey = 'id';

    Model.prototype.urlPath = function() {
      return '';
    };

    Model.prototype.urlParams = function() {
      var _ref1;

      return {
        access_token: (_ref1 = Chaplin.mediator.user) != null ? _ref1.get('accessToken') : void 0
      };
    };

    Model.prototype.urlRoot = function() {
      var urlPath;

      urlPath = this.urlPath();
      if (urlPath) {
        return this.apiRoot + urlPath;
      } else if (this.collection) {
        return this.collection.url();
      } else {
        throw new Error('Model must redefine urlPath');
      }
    };

    Model.prototype.url = function(data) {
      var base, full, params, payload, sep, url;

      if (data == null) {
        data = '';
      }
      base = this.urlRoot();
      full = this.get(this.urlKey) != null ? base + encodeURIComponent(this.get(this.urlKey)) + data : base + data;
      sep = full.indexOf('?') >= 0 ? '&' : '?';
      params = this.urlParams();
      payload = _.keys(params).map(function(key) {
        return [key, params[key]];
      }).filter(function(pair) {
        return pair[1] != null;
      }).map(function(pair) {
        return pair.join('=');
      }).join('&');
      url = payload ? full + sep + payload : full;
      return url;
    };

    Model.prototype.fetch = function(options) {
      var previous,
        _this = this;

      if (options == null) {
        options = {};
      }
      this.beginSync();
      previous = options.success;
      options.success = function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof previous === "function") {
          previous.apply(null, args);
        }
        return _this.finishSync();
      };
      return Model.__super__.fetch.apply(this, arguments);
    };

    return Model;

  })(Chaplin.Model);

}).call(this);
