// Generated by CoffeeScript 1.6.2
(function() {
  var FormView, SpinnerView, View, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = require('views/base/view');

  SpinnerView = require('views/spinner-view');

  module.exports = FormView = (function(_super) {
    __extends(FormView, _super);

    function FormView() {
      this.submit = __bind(this.submit, this);
      this.save = __bind(this.save, this);
      this.dismiss = __bind(this.dismiss, this);      _ref = FormView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    FormView.prototype.autoRender = true;

    FormView.prototype.events = {
      'click .cancel-form': 'dismiss',
      'submit': 'submit'
    };

    FormView.prototype.listen = {
      'loginStatus mediator': 'render'
    };

    FormView.prototype.tagName = 'form';

    FormView.prototype.publishSave = function(response) {
      if (this.saveEvent) {
        return this.publishEvent(this.saveEvent, response);
      }
    };

    FormView.prototype.dismiss = function(event) {
      if (event != null) {
        event.preventDefault();
      }
      this.trigger('dispose');
      return this.dispose();
    };

    FormView.prototype.save = function(event) {
      var spinner,
        _this = this;

      spinner = new SpinnerView({
        container: this.$('.submit-form')
      });
      return this.model.save().done(function(response) {
        _this.publishSave(response);
        return _this.dismiss();
      }).always(function(response) {
        return spinner.dispose();
      });
    };

    FormView.prototype.submit = function(event) {
      event.preventDefault();
      if (event.currentTarget.checkValidity()) {
        return this.save(event);
      }
    };

    return FormView;

  })(View);

}).call(this);
