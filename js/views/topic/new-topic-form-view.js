// Generated by CoffeeScript 1.6.2
(function() {
  var FormView, NewTopicFormView, Post, SpinnerView, template, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FormView = require('views/base/form-view');

  template = require('./templates/new-topic-form');

  Post = require('models/post');

  SpinnerView = require('views/spinner-view');

  module.exports = NewTopicFormView = (function(_super) {
    __extends(NewTopicFormView, _super);

    function NewTopicFormView() {
      this.save = __bind(this.save, this);
      this.changeText = __bind(this.changeText, this);
      this.changeTitle = __bind(this.changeTitle, this);
      this.toggleFields = __bind(this.toggleFields, this);      _ref = NewTopicFormView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NewTopicFormView.prototype.className = 'new-topic-form';

    NewTopicFormView.prototype.events = {
      'click .new-topic-form-toggle-fields-button': 'toggleFields',
      'keyup .new-topic-form-title': 'changeTitle',
      'keydown .new-topic-form-title': 'changeTitle',
      'keyup .new-topic-form-text': 'changeText',
      'keydown .new-topic-form-text': 'changeText'
    };

    NewTopicFormView.prototype.saveEvent = 'topic:new';

    NewTopicFormView.prototype.template = template;

    NewTopicFormView.prototype.initialize = function() {
      NewTopicFormView.__super__.initialize.apply(this, arguments);
      return this.post = new Post({
        topic: this.model
      });
    };

    NewTopicFormView.prototype.toggleFields = function(event) {
      $(event.currentTarget).toggleClass('active');
      return this.$('.new-topic-form-fields').toggleClass('visible');
    };

    NewTopicFormView.prototype.changeTitle = function(event) {
      if (!event.currentTarget.validity.valid) {
        return;
      }
      if (event.metaKey && event.keyCode === 13) {
        return this.$el.trigger('submit');
      } else {
        return this.model.set({
          title: $(event.currentTarget).val()
        });
      }
    };

    NewTopicFormView.prototype.changeText = function(event) {
      if (!event.currentTarget.validity.valid) {
        return;
      }
      if (event.metaKey && event.keyCode === 13) {
        return this.$el.trigger('submit');
      } else {
        return this.post.set({
          text: $(event.currentTarget).val()
        });
      }
    };

    NewTopicFormView.prototype.save = function(event) {
      var spinner,
        _this = this;

      spinner = new SpinnerView({
        container: this.$('.submit-form')
      });
      return this.model.save().done(function(response) {
        return _this.post.save().done(function(postResponse) {
          _this.$('.new-topic-form-toggle-fields-button').click();
          _this.publishSave(response);
          _this.trigger('dispose');
          return _this.dispose();
        }).fail(function(error) {
          console.error('NewTopicFormView#save', error);
          return _this.model.destroy();
        }).always(function() {
          return spinner.dispose();
        });
      }).fail(function() {
        return spinner.dispose();
      });
    };

    NewTopicFormView.prototype.dispose = function() {
      if (this.disposed) {
        return;
      }
      this.post.dispose();
      delete this.post;
      return NewTopicFormView.__super__.dispose.apply(this, arguments);
    };

    return NewTopicFormView;

  })(FormView);

}).call(this);
