// Generated by CoffeeScript 1.6.2
(function() {
  var Collection, NewPostFormView, PageView, Post, PostsView, TopicPageView, template, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Collection = require('models/base/collection');

  NewPostFormView = require('views/post/new-post-form-view');

  PageView = require('views/base/page-view');

  Post = require('models/post');

  PostsView = require('views/post/posts-view');

  template = require('./templates/topic-page');

  module.exports = TopicPageView = (function(_super) {
    __extends(TopicPageView, _super);

    function TopicPageView() {
      this.createNewPost = __bind(this.createNewPost, this);      _ref = TopicPageView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TopicPageView.prototype.template = template;

    TopicPageView.prototype.getNavigationData = function() {
      return {
        gravatar_id: this.model.get('repo').get('user').get('gravatar_id'),
        user_login: this.model.get('repo').get('user').get('login'),
        repo_name: this.model.get('repo').get('name'),
        topic_number: this.model.get('number')
      };
    };

    TopicPageView.prototype.renderSubviews = function() {
      var _this = this;

      this.posts = new Collection(null, {
        model: Post
      });
      this.posts.url = this.model.url('/posts/');
      this.subview('posts', new PostsView({
        collection: this.posts,
        container: this.$('.topic-posts-container')
      }));
      this.posts.fetch();
      this.subscribeEvent('post:new', function(post) {
        return _this.posts.push(post);
      });
      return this.createNewPost();
    };

    TopicPageView.prototype.createNewPost = function() {
      var newPost, newPostView,
        _this = this;

      newPost = new Post({
        topic: this.model
      });
      newPostView = new NewPostFormView({
        model: newPost,
        container: this.$('.new-post-form-container')
      });
      newPostView.on('dispose', function() {
        return setTimeout(_this.createNewPost, 0);
      });
      return this.subview('newPostForm', newPostView);
    };

    TopicPageView.prototype.dispose = function() {
      if (this.disposed) {
        return;
      }
      this.posts.dispose();
      delete this.posts;
      return TopicPageView.__super__.dispose.apply(this, arguments);
    };

    return TopicPageView;

  })(PageView);

}).call(this);
