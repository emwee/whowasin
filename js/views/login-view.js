// Generated by CoffeeScript 1.6.2
(function() {
  var LoginView, View, template, utils, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  utils = require('lib/utils');

  View = require('views/base/view');

  template = require('./templates/login');

  module.exports = LoginView = (function(_super) {
    __extends(LoginView, _super);

    function LoginView() {
      _ref = LoginView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LoginView.prototype.autoRender = true;

    LoginView.prototype.container = '#page-container';

    LoginView.prototype.id = 'login';

    LoginView.prototype.template = template;

    LoginView.prototype.initialize = function(options) {
      LoginView.__super__.initialize.apply(this, arguments);
      return this.initButtons(options.serviceProviders);
    };

    LoginView.prototype.initButtons = function(serviceProviders) {
      var _this = this;

      return _.each(serviceProviders, function(serviceProvider, serviceProviderName) {
        var bind, buttonSelector;

        bind = function(fn) {
          return _(fn).bind(_this, serviceProviderName, serviceProvider);
        };
        buttonSelector = "." + serviceProviderName;
        _this.$(buttonSelector).addClass('service-loading');
        _this.delegate('click', buttonSelector, bind(_this.loginWith));
        serviceProvider.done(bind(_this.serviceProviderLoaded));
        return serviceProvider.fail(bind(_this.serviceProviderFailed));
      });
    };

    LoginView.prototype.loginWith = function(serviceProviderName, serviceProvider, event) {
      event.preventDefault();
      if (!serviceProvider.isLoaded()) {
        return;
      }
      this.publishEvent('login:pickService', serviceProviderName);
      return this.publishEvent('!login', serviceProviderName);
    };

    LoginView.prototype.serviceProviderLoaded = function(serviceProviderName) {
      return this.$("." + serviceProviderName).removeClass('service-loading');
    };

    LoginView.prototype.serviceProviderFailed = function(serviceProviderName) {
      return this.$("." + serviceProviderName).removeClass('service-loading').addClass('service-unavailable').attr('disabled', true).attr('title', "Error connecting. Please check whether you areblocking " + (utils.upcase(serviceProviderName)) + ".");
    };

    return LoginView;

  })(View);

}).call(this);
