// Generated by CoffeeScript 1.6.2
(function() {
  var EditPostFormView, FormView, template, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FormView = require('views/base/form-view');

  template = require('./templates/edit-post-form');

  module.exports = EditPostFormView = (function(_super) {
    __extends(EditPostFormView, _super);

    function EditPostFormView() {
      this.changeText = __bind(this.changeText, this);      _ref = EditPostFormView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    EditPostFormView.prototype.className = 'post post-create';

    EditPostFormView.prototype.events = {
      'keyup .edit-post-body': 'changeText',
      'keydown .edit-post-body': 'changeText'
    };

    EditPostFormView.prototype.saveEvent = 'post:edit';

    EditPostFormView.prototype.template = template;

    EditPostFormView.prototype.resizeTextArea = function() {
      var _ref1,
        _this = this;

      if ((_ref1 = this.$edit) == null) {
        this.$edit = this.$('.edit-post-body');
      }
      return setTimeout(function() {
        var height;

        height = "" + (_this.$edit.prop('scrollHeight') + 10) + "px";
        return _this.$edit.animate({
          height: height
        }, 250);
      }, 0);
    };

    EditPostFormView.prototype.changeText = function(event) {
      if (event.metaKey && event.keyCode === 13) {
        return this.$el.trigger('submit');
      } else {
        return this.model.set({
          text: $(event.currentTarget).val()
        });
      }
    };

    EditPostFormView.prototype.render = function() {
      EditPostFormView.__super__.render.apply(this, arguments);
      return this.resizeTextArea();
    };

    EditPostFormView.prototype.publishSave = function(response) {
      if (this.saveEvent) {
        return this.publishEvent(this.saveEvent, this.model);
      }
    };

    return EditPostFormView;

  })(FormView);

}).call(this);
