// Generated by CoffeeScript 1.6.2
(function() {
  var EditPostFormView, PostView, View, template, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EditPostFormView = require('views/post/edit-post-form-view');

  template = require('./templates/post');

  View = require('views/base/view');

  module.exports = PostView = (function(_super) {
    __extends(PostView, _super);

    function PostView() {
      this.deletePost = __bind(this.deletePost, this);
      this.editPost = __bind(this.editPost, this);      _ref = PostView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PostView.prototype.className = 'post';

    PostView.prototype.events = {
      'click .post-edit-button': 'editPost',
      'click .post-delete-button': 'deletePost'
    };

    PostView.prototype.tagName = 'article';

    PostView.prototype.template = template;

    PostView.prototype.editPost = function(event) {
      var createNewPost,
        _this = this;

      this.$('.post-text').remove();
      createNewPost = function() {
        var container, editPostView;

        container = _this.$('.post-content');
        editPostView = new EditPostFormView({
          model: _this.model,
          container: container
        });
        editPostView.on('dispose', _this.render);
        return _this.subview('editPostForm', editPostView);
      };
      return createNewPost();
    };

    PostView.prototype.deletePost = function(event) {
      return this.model.destroy();
    };

    return PostView;

  })(View);

}).call(this);
